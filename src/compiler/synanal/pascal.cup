package compiler.synanal;

import java_cup.runtime.*;

import compiler.report.*;
import compiler.abstree.tree.*;

parser code
{:
        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }
        
        public void report_error(String message, Object info) {
        }
        
        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }
:}

terminal String BOOL_CONST, CHAR_CONST, INT_CONST, NIL;
terminal String IDENTIFIER;

terminal String BOOL, CHAR, INT;
terminal String COLON, COMMA, DOT, DOTS, LBRACKET, LPARENTHESIS, RBRACKET, RPARENTHESIS, SEMIC;
terminal String ADD, AND, DIV, EQU, GEQ, GTH, LEQ, LTH, MUL, NEQ, NOT, OR, PTR, SUB ;
terminal String ARRAY, ASSIGN, BEGIN, CONST, DO, ELSE, END, FOR, FUNCTION, IF, OF, PROCEDURE, PROGRAM, RECORD, THEN, TO, TYPE, VAR, WHILE;


non terminal AbsProgram 	source;
non terminal AbsDeclName 		program_name;
non terminal AbsProgram 		source_body;
non terminal AbsDecls			declarations;
non terminal AbsDecls				declarations_const;
non terminal AbsDecls					const_list;
non terminal AbsConstDecl					single_const;
non terminal AbsDecls				declarations_type;
non terminal AbsDecls					type_list;
non terminal AbsTypeDecl					single_type;
non terminal AbsDecls				declarations_var;
non terminal AbsDecls					var_list;
non terminal AbsVarDecl						single_var;
non terminal AbsDecls				declarations_subrutine;

non terminal AbsProcDecl				subrutine_procedure;
non terminal AbsProcDecl					procedure_name;
non terminal AbsFunDecl					subrutine_function;
non terminal AbsFunDecl						function_name;
non terminal AbsDecls					parameter_declaration;
non terminal AbsDecls						parameter_discription_list;
non terminal AbsTypeDecl						single_parameter_discription;
non terminal AbsValExprs				input_parameters;
non terminal AbsValExprs					parameter_list;
non terminal AbsValExpr							single_parameter;

non terminal AbsTypeExpr		type_description;
non terminal AbsTypeExpr			primitive_type;
non terminal AbsTypeExpr			reference_type;
non terminal AbsArrayType				type_array;
non terminal AbsRecordType				type_record;
non terminal AbsDecls						record_components;
non terminal AbsTypeDecl						single_record_component;
non terminal AbsTypeExpr				type_pointer;

non terminal AbsValExpr			value_expression;
non terminal AbsValExpr				const_values;
non terminal AbsValExpr				or_expression;
non terminal AbsValExpr				and_expression;
non terminal AbsValExpr				relation_expression;
non terminal AbsValExpr				add_sub_expression;
non terminal AbsValExpr				mul_div_expression;
non terminal AbsValExpr				not_expression;
non terminal AbsValExpr				values;

non terminal AbsBlockStmt		statement_block;
non terminal			statement_list;
non terminal				statement;
non terminal					if_statement;
non terminal						unmatched_if_statement;
non terminal						full_matched_if_statement;
non terminal							matched_if_statement;
non terminal								no_if_statement;
non terminal								matched_if_while_statement;
non terminal								matched_if_for_statement;
non terminal					while_statement;
non terminal					for_statement;
non terminal					final_statement;
				
precedence left PTR,ADD,SUB;
precedence left DOT;

start with source;



///////////////////////////////
//////////// start ////////////
///////////////////////////////

source ::= 
				program_name:name source_body:body DOT:d
				{:
					AbsProgram p = new AbsProgram(
							name, 
							body.decls, 
							body.stmt
					);
					p.setBeg(name);
					p.setEnd(d,dleft,dright);
					RESULT = p;
				:}
		;

program_name ::= 
				PROGRAM:p IDENTIFIER:name SEMIC:s
				{:
					AbsDeclName r = new AbsDeclName(name);
					r.setBeg(p,pleft,pright);
					r.setEnd(s,sleft,sright);
					RESULT = r;
				:}
		;

source_body ::= 
				statement_block:stmt
				{:
					AbsProgram r = new AbsProgram(
							null,
							new AbsDecls(),
							stmt
					);
					r.setBeg(stmt);
					r.setEnd(stmt);
					RESULT = r;
				:}
		|		declarations:decls statement_block:stmt
				{:
					AbsProgram r = new AbsProgram(
							null,
							decls,
							stmt
					);
					r.setBeg(decls);
					r.setEnd(stmt);
					RESULT = r;
				:}
		;



///////////////////////////////////////////
//////////// seznam deklaracij ////////////
///////////////////////////////////////////

declarations ::= 	
				declarations_const:constDecl
				{:
					RESULT = constDecl;
				:}
		;


//////////// deklaracije konstant ////////////

declarations_const ::= 
				CONST const_list:constList
					{:
						RESULT = constList;
					:}
		|		CONST const_list:constList declarations_type:typeDecl
					{:
						constList.decls.addAll(typeDecl.decls);
						constList.setEnd(typeDecl);
						RESULT = constList;
					:}
		|		declarations_type:typeDecl
					{:
						RESULT = typeDecl;
					:}
		;

const_list ::= 
				single_const:singleDecl
					{:
						AbsDecls list = new AbsDecls();
						list.decls.add(singleDecl);
						list.setBeg(singleDecl);
						list.setEnd(singleDecl);
						RESULT = list;
					:}
		|		const_list:list single_const:singleDecl
					{:
						list.decls.add(singleDecl);
						list.setEnd(singleDecl);
						RESULT = list;
					:}
		;
		
single_const ::= 
				IDENTIFIER:name EQU value_expression:val SEMIC:s
					{:
						AbsDeclName dname = new AbsDeclName(name);
						dname.setBeg(name,nameleft,nameright);
						dname.setEnd(name,nameleft,nameright);
						AbsConstDecl r = new AbsConstDecl(
								dname,
								val
						);
						r.setBeg(name,nameleft,nameright);
						r.setEnd(s,sleft,sright);
						RESULT = r;
					:}
		;



//////////// deklaracije tipov ////////////

declarations_type ::= 
				TYPE type_list:typeList
					{:
						RESULT = typeList;
					:}
		|		TYPE type_list:typeList declarations_var:varDecl
					{:
						typeList.decls.addAll(varDecl.decls);
						typeList.setEnd(varDecl);
						RESULT = typeList;
					:}
		|		declarations_var:varDecl
					{:
						RESULT = varDecl;
					:}
		;


type_list ::= 
				single_type:singleDecl
					{:
						AbsDecls list = new AbsDecls();
						list.decls.add(singleDecl);
						list.setBeg(singleDecl);
						list.setEnd(singleDecl);
						RESULT = list;
					:}
		| 		type_list:list single_type:singleDecl
					{:
						list.decls.add(singleDecl);
						list.setEnd(singleDecl);
						RESULT = list;
					:}
		;

single_type ::= 
				IDENTIFIER:name EQU type_description:type SEMIC:s
					{:
						AbsDeclName dname = new AbsDeclName(name);
						dname.setBeg(name,nameleft,nameright);
						dname.setEnd(name,nameleft,nameright);
						AbsTypeDecl r = new AbsTypeDecl(
								dname,
								type
						);
						r.setBeg(name,nameleft,nameright);
						r.setEnd(s,sleft,sright);
						RESULT = r;
					:}
		;



//////////// deklaracije spremenljivk ////////////

declarations_var ::= 
				VAR var_list:varList
					{:
						RESULT = varList;
					:}
		|		VAR var_list:varList declarations_subrutine:subDecl
					{:
						varList.decls.addAll(subDecl.decls);
						varList.setEnd(subDecl);
						RESULT = varList;
					:}
		|		declarations_subrutine:subDecl
					{:
						RESULT = subDecl;
					:}
		;

var_list ::= 
				single_var :singleDecl
					{:
						AbsDecls list = new AbsDecls();
						list.decls.add(singleDecl);
						list.setBeg(singleDecl);
						list.setEnd(singleDecl);
						RESULT = list;
					:}
		|		var_list:list single_var:singleDecl
					{:
						list.decls.add(singleDecl);
						list.setEnd(singleDecl);
						RESULT = list;
					:}
		;

single_var ::= 
				IDENTIFIER:name COLON type_description:type SEMIC:s
					{:
						AbsDeclName dname = new AbsDeclName(name);
						dname.setBeg(name,nameleft,nameright);
						dname.setEnd(name,nameleft,nameright);
						AbsVarDecl r = new AbsVarDecl(
								dname,
								type
						);
						r.setBeg(name,nameleft,nameright);
						r.setEnd(s,sleft,sright);
						RESULT = r;
					:}
		;



//////////// deklaracije podprogramov ////////////

declarations_subrutine ::= 
				subrutine_procedure:singleDecl
					{:
						AbsDecls list = new AbsDecls();
						list.decls.add(singleDecl);
						list.setBeg(singleDecl);
						list.setEnd(singleDecl);
						RESULT = list;
					:}
		| 		subrutine_function:singleDecl
					{:
						AbsDecls list = new AbsDecls();
						list.decls.add(singleDecl);
						list.setBeg(singleDecl);
						list.setEnd(singleDecl);
						RESULT = list;
					:}
		|		declarations_subrutine:list subrutine_procedure:singleDecl
					{:
						list.decls.add(singleDecl);
						list.setEnd(singleDecl);
						RESULT = list;
					:}
		| 		declarations_subrutine:list subrutine_function:singleDecl
					{:
						list.decls.add(singleDecl);
						list.setEnd(singleDecl);
						RESULT = list;
					:}
		;



//////////// deklaracije procedur ////////////

subrutine_procedure ::= 
				procedure_name:procName source_body:procBody SEMIC:s
					{:
						// AbsProcDecl(AbsDeclName name, AbsDecls pars, AbsDecls decls, AbsBlockStmt stmt) {
						AbsProcDecl r = new AbsProcDecl(procName.name,procName.pars,procBody.decls,procBody.stmt);
						r.setBeg(procName);
						r.setEnd(s,sleft,sright);
						RESULT = r;
					:}
		;

procedure_name ::= 
				PROCEDURE:p IDENTIFIER:name parameter_declaration:params SEMIC:s
				{:
					AbsDeclName n = new AbsDeclName(name);
					n.setBeg(name,nameleft,nameright);
					n.setEnd(name,nameleft,nameright);
					AbsProcDecl r = new AbsProcDecl(n,params,null,null);
					r.setBeg(p,pleft,pright);
					r.setEnd(s,sleft,sright);
					RESULT = r;
				:}
		;



//////////// deklaracije funkcij ////////////
 
subrutine_function ::= 
				function_name:funName source_body:funBody SEMIC:s
					{:
						// AbsFunDecl(AbsDeclName name, AbsDecls pars, AbsTypeExpr type, AbsDecls decls, AbsBlockStmt stmt) {
						AbsFunDecl r = new AbsFunDecl(funName.name, funName.pars, funName.type, funBody.decls, funBody.stmt);
						r.setBeg(funName);
						r.setEnd(s,sleft,sright);
						RESULT = r;
					:}
		;

function_name ::= 
				FUNCTION:f IDENTIFIER:name parameter_declaration:params COLON type_description:type SEMIC:s
				{:
					AbsDeclName n = new AbsDeclName(name);
					n.setBeg(name,nameleft,nameright);
					n.setEnd(name,nameleft,nameright);
					AbsFunDecl r = new AbsFunDecl(n,params,type,null,null);
					r.setBeg(f,fleft,fright);
					r.setEnd(s,sleft,sright);
					RESULT = r;
				:}
		;



////////////////////////////////////////////////////////
//////////// opis parametrov (deklaracije) /////////////
////////////////////////////////////////////////////////

parameter_declaration ::= 
				LPARENTHESIS:lp RPARENTHESIS:rp
					{:
						AbsDecls r = new AbsDecls();
						r.setBeg(lp,lpleft,lpright);
						r.setEnd(rp,rpleft,rpright);
						RESULT = r;
					:}
		|		LPARENTHESIS:l parameter_discription_list:list RPARENTHESIS:r
					{:
						list.setBeg(l,lleft,lright);
						list.setEnd(r,rleft,rright);
						RESULT = list;
					:}
		;

parameter_discription_list ::= 
				single_parameter_discription:singleDecl
					{:
						AbsDecls list = new AbsDecls();
						list.decls.add(singleDecl);
						list.setBeg(singleDecl);
						list.setEnd(singleDecl);
						RESULT = list;
					:}
		|		parameter_discription_list:list SEMIC single_parameter_discription:singleDecl
					{:
						list.decls.add(singleDecl);
						list.setEnd(singleDecl);
						RESULT = list;
					:}
		;

single_parameter_discription ::= 
				IDENTIFIER:name COLON type_description:type
					{:
						AbsDeclName dname = new AbsDeclName(name);
						dname.setBeg(name,nameleft,nameright);
						dname.setEnd(name,nameleft,nameright);
						AbsTypeDecl r = new AbsTypeDecl(dname,type);
						r.setBeg(name,nameleft,nameright);
						r.setEnd(type);
						RESULT = r;
					:}
		;



//////////////////////////////////////////////////
//////////// opis parametrov (klici) /////////////
//////////////////////////////////////////////////


input_parameters ::= 
				LPARENTHESIS:lp RPARENTHESIS :rp
					{:
						AbsValExprs r = new AbsValExprs();
						r.setBeg(lp,lpleft,lpright);
						r.setEnd(rp,rpleft,rpright);
						RESULT = r;
					:}
		|		LPARENTHESIS:lpal parameter_list:list RPARENTHESIS:rpal
					{:
						list.setBeg(lpal,lpalleft,lpalright);
						list.setEnd(rpal,rpalleft,rpalright);
						RESULT = list;
					:}
		;

parameter_list ::= 
				single_parameter:singleExpr
					{:
						AbsValExprs list = new AbsValExprs();
						list.exprs.add(singleExpr);
						list.setBeg(singleExpr);
						list.setEnd(singleExpr);
						RESULT = list;
					:}
		|		parameter_list:list COMMA single_parameter:singleExpr
					{:
						list.exprs.add(singleExpr);
						list.setEnd(singleExpr);
						RESULT = list;
					:}
		;

single_parameter ::= 
				value_expression:v
					{:
						RESULT = v;
					:}
		;


////////////////////////////////////
//////////// opis tipov ////////////
////////////////////////////////////

type_description ::=
				primitive_type:type
					{:
						RESULT = type;
					:}
		|		reference_type:type
					{:
						RESULT = type;
					:}
		|		IDENTIFIER:name
					{:
						AbsTypeName r = new AbsTypeName(name);
						r.setBeg(name,nameleft,nameright);
						r.setEnd(name,nameleft,nameright);
						RESULT = r;
					:}
		|		LPARENTHESIS type_description:type RPARENTHESIS
					{:
						RESULT = type;
					:}
		;

primitive_type ::= 
				CHAR:t
					{:
						AbsAtomType r = new AbsAtomType(AbsAtomType.CHAR);
						r.setBeg(t,tleft,tright);
						r.setEnd(t,tleft,tright);
						RESULT = r;
					:}
		|		BOOL:t
					{:
						AbsAtomType r = new AbsAtomType(AbsAtomType.BOOL);
						r.setBeg(t,tleft,tright);
						r.setEnd(t,tleft,tright);
						RESULT = r;
					:}
		|		INT:t
					{:
						AbsAtomType r = new AbsAtomType(AbsAtomType.INT);
						r.setBeg(t,tleft,tright);
						r.setEnd(t,tleft,tright);
						RESULT = r;
					:}
		;

reference_type ::= 
				type_array:type
					{:
						RESULT = type;
					:}
		|		type_record:type
					{:
						RESULT = type;
					:}
		|		type_pointer:type
					{:
						RESULT = type;
					:}
		;


type_array ::= 	
				ARRAY:a LBRACKET value_expression:valFrom DOTS value_expression:valTo RBRACKET OF type_description:typeDes
					{:
						// AbsArrayType(AbsTypeExpr type, AbsValExpr loBound, AbsValExpr hiBound) {
						AbsArrayType r = new AbsArrayType(typeDes,valFrom,valTo);
						r.setBeg(a,aleft,aright);
						r.setEnd(typeDes);
						RESULT = r;
					:}
		;

type_record ::=  
				RECORD:b record_components:records END:e
					{:
						AbsRecordType r = new AbsRecordType(records);
						r.setBeg(b,bleft,bright);
						r.setEnd(e,eleft,eright);
						RESULT = r;
					:}
		;

record_components ::= 
				single_record_component:singleDecl
					{:
						AbsDecls r = new AbsDecls();
						r.decls.add(singleDecl);
						r.setBeg(singleDecl);
						r.setEnd(singleDecl);
						RESULT = r;
					:}
		|		record_components:list SEMIC single_record_component:singleDecl
					{:
						list.decls.add(singleDecl);
						list.setEnd(singleDecl);
						RESULT = list;
					:}
		;

single_record_component ::= 
				single_parameter_discription:type
					{:
						RESULT = type;
					:}
		;

type_pointer ::= 
				PTR:p type_description:type
					{:
						type.setBeg(p,pleft,pright);
						RESULT = type;
					:}
		;



////////////////////////////////////////
//////////// opis vrednosti ////////////
////////////////////////////////////////


value_expression ::= 
				or_expression:nextExpr
					{:
						RESULT = nextExpr;
					:}
		;

or_expression ::=
				and_expression:nextExpr
					{:
						RESULT = nextExpr;
					:}
		|		or_expression:curExpr OR and_expression:nextExpr
					{:
						// AbsBinExpr(int oper, AbsValExpr fstExpr, AbsValExpr sndExpr) {
						AbsBinExpr r = new AbsBinExpr(AbsBinExpr.OR,curExpr,nextExpr);
						r.setBeg(curExpr);
						r.setEnd(nextExpr);
						RESULT = r;
					:}
		;

and_expression ::=
				relation_expression:nextExpr
					{:
						RESULT = nextExpr;
					:}
		|		and_expression:curExpr AND relation_expression:nextExpr
					{:
						// AbsBinExpr(int oper, AbsValExpr fstExpr, AbsValExpr sndExpr) {
						AbsBinExpr r = new AbsBinExpr(AbsBinExpr.AND,curExpr,nextExpr);
						r.setBeg(curExpr);
						r.setEnd(nextExpr);
						RESULT = r;
					:}
		;

relation_expression ::=
				add_sub_expression:nextExpr
					{:
						RESULT = nextExpr;
					:}
		|		relation_expression:curExpr EQU add_sub_expression:nextExpr
					{:
						// AbsBinExpr(int oper, AbsValExpr fstExpr, AbsValExpr sndExpr) {
						AbsBinExpr r = new AbsBinExpr(AbsBinExpr.EQU,curExpr,nextExpr);
						r.setBeg(curExpr);
						r.setEnd(nextExpr);
						RESULT = r;
					:}
		|		relation_expression:curExpr NEQ add_sub_expression:nextExpr
					{:
						// AbsBinExpr(int oper, AbsValExpr fstExpr, AbsValExpr sndExpr) {
						AbsBinExpr r = new AbsBinExpr(AbsBinExpr.NEQ,curExpr,nextExpr);
						r.setBeg(curExpr);
						r.setEnd(nextExpr);
						RESULT = r;
					:}
		|		relation_expression:curExpr GTH add_sub_expression:nextExpr
					{:
						// AbsBinExpr(int oper, AbsValExpr fstExpr, AbsValExpr sndExpr) {
						AbsBinExpr r = new AbsBinExpr(AbsBinExpr.GTH,curExpr,nextExpr);
						r.setBeg(curExpr);
						r.setEnd(nextExpr);
						RESULT = r;
					:}
		|		relation_expression:curExpr LTH add_sub_expression:nextExpr
					{:
						// AbsBinExpr(int oper, AbsValExpr fstExpr, AbsValExpr sndExpr) {
						AbsBinExpr r = new AbsBinExpr(AbsBinExpr.LTH,curExpr,nextExpr);
						r.setBeg(curExpr);
						r.setEnd(nextExpr);
						RESULT = r;
					:}
		|		relation_expression:curExpr LEQ add_sub_expression:nextExpr
					{:
						// AbsBinExpr(int oper, AbsValExpr fstExpr, AbsValExpr sndExpr) {
						AbsBinExpr r = new AbsBinExpr(AbsBinExpr.LEQ,curExpr,nextExpr);
						r.setBeg(curExpr);
						r.setEnd(nextExpr);
						RESULT = r;
					:}
		|		relation_expression:curExpr GEQ add_sub_expression:nextExpr
					{:
						// AbsBinExpr(int oper, AbsValExpr fstExpr, AbsValExpr sndExpr) {
						AbsBinExpr r = new AbsBinExpr(AbsBinExpr.GEQ,curExpr,nextExpr);
						r.setBeg(curExpr);
						r.setEnd(nextExpr);
						RESULT = r;
					:}
		;

add_sub_expression ::= 
				mul_div_expression:nextExpr
				{:
					RESULT = nextExpr;
				:}
		|		add_sub_expression:curExpr ADD mul_div_expression:nextExpr
					{:
						// AbsBinExpr(int oper, AbsValExpr fstExpr, AbsValExpr sndExpr) {
						AbsBinExpr r = new AbsBinExpr(AbsBinExpr.ADD,curExpr,nextExpr);
						r.setBeg(curExpr);
						r.setEnd(nextExpr);
						RESULT = r;
					:}
		|		add_sub_expression:curExpr SUB mul_div_expression:nextExpr
					{:
						// AbsBinExpr(int oper, AbsValExpr fstExpr, AbsValExpr sndExpr) {
						AbsBinExpr r = new AbsBinExpr(AbsBinExpr.SUB,curExpr,nextExpr);
						r.setBeg(curExpr);
						r.setEnd(nextExpr);
						RESULT = r;
					:}
		;

mul_div_expression ::= 
				not_expression:nextExpr
				{:
					RESULT = nextExpr;
				:}
		|		mul_div_expression:curExpr MUL not_expression:nextExpr
					{:
						// AbsBinExpr(int oper, AbsValExpr fstExpr, AbsValExpr sndExpr) {
						AbsBinExpr r = new AbsBinExpr(AbsBinExpr.MUL,curExpr,nextExpr);
						r.setBeg(curExpr);
						r.setEnd(nextExpr);
						RESULT = r;
					:}
		|		mul_div_expression:curExpr DIV not_expression:nextExpr
					{:
						// AbsBinExpr(int oper, AbsValExpr fstExpr, AbsValExpr sndExpr) {
						AbsBinExpr r = new AbsBinExpr(AbsBinExpr.DIV,curExpr,nextExpr);
						r.setBeg(curExpr);
						r.setEnd(nextExpr);
						RESULT = r;
					:}
		;

not_expression ::=
				values:nextExpr
				{:
					RESULT = nextExpr;
				:}
		|		NOT not_expression
		;
		
values ::= 
				const_values:constValues
					{:
						RESULT = constValues;
					:}
		|		IDENTIFIER
		|		IDENTIFIER input_parameters
		|		SUB values
		|		ADD values
		|		PTR values
		|		values PTR
		|		values DOT IDENTIFIER
		|		LPARENTHESIS value_expression RPARENTHESIS
		|		values LBRACKET value_expression RBRACKET
		|		LBRACKET type_description RBRACKET
		;

const_values ::= 
				BOOL_CONST:atomConst
					{:
						AbsAtomConst r = new AbsAtomConst(atomConst,AbsAtomConst.BOOL);
						r.setBeg(atomConst,atomConstleft,atomConstright);
						r.setEnd(atomConst,atomConstleft,atomConstright);
						RESULT = r;
					:}
		| 		CHAR_CONST:atomConst
					{:
						AbsAtomConst r = new AbsAtomConst(atomConst,AbsAtomConst.CHAR);
						r.setBeg(atomConst,atomConstleft,atomConstright);
						r.setEnd(atomConst,atomConstleft,atomConstright);
						RESULT = r;
					:}
		|		INT_CONST:atomConst
					{:
						AbsAtomConst r = new AbsAtomConst(atomConst,AbsAtomConst.INT);
						r.setBeg(atomConst,atomConstleft,atomConstright);
						r.setEnd(atomConst,atomConstleft,atomConstright);
						RESULT = r;
					:}
		|		NIL:atomConst
					{:
						RESULT = new AbsNilConst();
					:}
		;



////////////////////////////////
//////////// stavki ////////////
////////////////////////////////

statement_block ::= 
				BEGIN:b END:e
				{:
					AbsBlockStmt r = new AbsBlockStmt(new AbsStmts());
					r.setBeg(b,bleft,bright);
					r.setEnd(e,eleft,eright);
					RESULT = r;
				:}
		|		BEGIN:b statement_list END:e
				{:
					AbsBlockStmt r = new AbsBlockStmt(new AbsStmts());
					r.setBeg(b,bleft,bright);
					r.setEnd(e,eleft,eright);
					RESULT = r;
				:}
		;

statement_list ::= 
				statement
		|		statement_list SEMIC statement
		;

statement ::= 
				if_statement
		|		while_statement
		|		for_statement
		|		final_statement
		;

final_statement ::=
				value_expression
		|		value_expression ASSIGN value_expression
		|		statement_block
		;

while_statement ::= 
				WHILE value_expression DO statement
		;

for_statement ::= 
				FOR IDENTIFIER ASSIGN value_expression TO value_expression DO statement
		;



//////////// if else stavek ////////////

if_statement ::= 
				full_matched_if_statement
		|		unmatched_if_statement
		;

full_matched_if_statement ::= 
				IF value_expression THEN matched_if_statement ELSE matched_if_statement
		;

matched_if_statement ::= 
				no_if_statement
		|		IF value_expression THEN matched_if_statement ELSE matched_if_statement
		;

unmatched_if_statement ::= 
				IF value_expression THEN statement
		|		IF value_expression THEN matched_if_statement ELSE unmatched_if_statement
		;

no_if_statement ::= 
				value_expression
		|		value_expression ASSIGN value_expression
		|		statement_block
		|		matched_if_while_statement
		|		matched_if_for_statement
		;

matched_if_while_statement ::= 
				WHILE value_expression DO matched_if_statement
		;

matched_if_for_statement ::=
				FOR IDENTIFIER ASSIGN value_expression TO value_expression DO matched_if_statement
		;

