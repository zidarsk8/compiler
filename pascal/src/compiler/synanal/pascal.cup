package compiler.synanal;

import java_cup.runtime.*;

import compiler.report.*;

parser code
{:
        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }
        
        public void report_error(String message, Object info) {
        }
        
        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }
:}

terminal String BOOL_CONST, CHAR_CONST, INT_CONST, NIL;
terminal String IDENTIFIER;

terminal BOOL, CHAR, INT;
terminal COLON, COMMA, DOT, DOTS, LBRACKET, LPARENTHESIS, RBRACKET, RPARENTHESIS, SEMIC;
terminal ADD, AND, DIV, EQU, GEQ, GTH, LEQ, LTH, MUL, NEQ, NOT, OR, PTR, SUB ;
terminal ARRAY, ASSIGN, BEGIN, CONST, DO, ELSE, END, FOR, FUNCTION, IF, OF, PROCEDURE, PROGRAM, RECORD, THEN, TO, TYPE, VAR, WHILE;

non terminal	source,
					program_name,
					source_body,
					declarations,
						declarations_const,
							const_list,
								single_const,
						declarations_type,
							type_list,
								single_type,
						declarations_var,
							var_list,
								single_var,
						declarations_subrutine,
							subrutine_procedure, 
								procedure_name,
							subrutine_function,
								function_name,
						parameter_declaration,
							parameter_discription_list,
								single_parameter_discription,
						input_parameters,
							parameter_list,
								single_parameter,
					type_description, // izraz za opis tipov
						primitive_type,
						reference_type,
							type_array,
							type_record,
								record_components,
									single_record_component,
							type_pointer,
					value_expression,
						const_values,
						or_expression,
						and_expression,
						relation_expression,
						add_sub_expression,
						mul_div_expression,
						not_expression,
						values,
					statement_block,
						statement_list,
							statement,
								if_statement,
									unmatched_if_statement,
									full_matched_if_statement,
										matched_if_statement,
											no_if_statement,
											matched_if_while_statement,
											matched_if_for_statement,
								while_statement,
								for_statement,
								final_statement
				;
				
precedence left PTR,ADD,SUB;
precedence left DOT;

start with source;



///////////////////////////////
//////////// start ////////////
///////////////////////////////

source ::= 
//				program_name:programName source_body:sourceBody DOT
				value_expression
		;

program_name ::= 
				PROGRAM IDENTIFIER SEMIC
		;

source_body ::= 
				statement_block
		|		declarations statement_block
		;



///////////////////////////////////////////
//////////// seznam deklaracij ////////////
///////////////////////////////////////////

declarations ::= 	
				declarations_const
		;


//////////// deklaracije konstant ////////////

declarations_const ::= 
				CONST const_list
		|		CONST const_list declarations_type
		|		declarations_type
		;

const_list ::= 
				single_const
		|		const_list single_const
		;
		
single_const ::= 
				IDENTIFIER EQU value_expression SEMIC 
		;



//////////// deklaracije tipov ////////////

declarations_type ::= 
				TYPE type_list
		|		TYPE type_list declarations_var
		|		declarations_var
		;


type_list ::= 
				single_type 
		| 		type_list single_type
		;

single_type ::= 
				IDENTIFIER EQU type_description SEMIC
		;



//////////// deklaracije spremenljivk ////////////

declarations_var ::= 
				VAR var_list
		|		VAR var_list declarations_subrutine
		|		declarations_subrutine
		;

var_list ::= 
				single_var 
		|		single_var var_list
		;

single_var ::= 
				IDENTIFIER COLON type_description SEMIC
		;



//////////// deklaracije podprogramov ////////////

declarations_subrutine ::= 
				subrutine_procedure 
		| 		subrutine_function
		|		declarations_subrutine subrutine_procedure 
		| 		declarations_subrutine subrutine_function
		;



//////////// deklaracije procedur ////////////

subrutine_procedure ::= 
				procedure_name source_body SEMIC
		;

procedure_name ::= 
				PROCEDURE IDENTIFIER parameter_declaration SEMIC
		;



//////////// deklaracije funkcij ////////////
 
subrutine_function ::= 
				function_name source_body SEMIC
		;

function_name ::= 
				FUNCTION IDENTIFIER parameter_declaration COLON type_description SEMIC
		;



////////////////////////////////////////////////////////
//////////// opis parametrov (deklaracije) /////////////
////////////////////////////////////////////////////////

parameter_declaration ::= 
				LPARENTHESIS RPARENTHESIS 
		|		LPARENTHESIS parameter_discription_list RPARENTHESIS
		;

parameter_discription_list ::= 
				single_parameter_discription
		|		parameter_discription_list SEMIC single_parameter_discription
		;

single_parameter_discription ::= 
				IDENTIFIER COLON type_description
		;



//////////////////////////////////////////////////
//////////// opis parametrov (klici) /////////////
//////////////////////////////////////////////////


input_parameters ::= 
				LPARENTHESIS RPARENTHESIS 
		|		LPARENTHESIS parameter_list RPARENTHESIS
		;

parameter_list ::= 
				single_parameter
		|		parameter_list COMMA single_parameter
		;

single_parameter ::= 
				value_expression
		;


////////////////////////////////////
//////////// opis tipov ////////////
////////////////////////////////////

type_description ::=
				primitive_type
		|		reference_type
		|		IDENTIFIER
		|		LPARENTHESIS type_description RPARENTHESIS
		;

primitive_type ::= 
				CHAR
		|		BOOL
		|		INT
		;

reference_type ::= 
				type_array
		|		type_record
		|		type_pointer
		;


type_array ::= 	
				ARRAY LBRACKET value_expression DOTS value_expression RBRACKET OF type_description
		;

type_record ::=  
				RECORD record_components END
		;

record_components ::= 
				single_record_component
		|		record_components SEMIC single_record_component
		;

single_record_component ::= 
				IDENTIFIER COLON type_description
		;

type_pointer ::= 
				PTR type_description
		;



////////////////////////////////////////
//////////// opis vrednosti ////////////
////////////////////////////////////////


value_expression ::= 
				or_expression
		;

or_expression ::=
				and_expression
		|		or_expression OR and_expression
		;

and_expression ::=
				relation_expression
		|		and_expression AND relation_expression
		;

relation_expression ::=
				add_sub_expression
		|		relation_expression EQU add_sub_expression
		|		relation_expression NEQ add_sub_expression
		|		relation_expression GTH add_sub_expression
		|		relation_expression LTH add_sub_expression
		|		relation_expression LEQ add_sub_expression
		|		relation_expression GEQ add_sub_expression
		;

add_sub_expression ::= 
				mul_div_expression
		|		add_sub_expression ADD mul_div_expression
		|		add_sub_expression SUB mul_div_expression
		;

mul_div_expression ::= 
				not_expression
		|		mul_div_expression MUL not_expression
		|		mul_div_expression DIV not_expression
		;

not_expression ::=
				values
		|		NOT not_expression
		;
		
values ::= 
				const_values
		|		IDENTIFIER
		|		IDENTIFIER input_parameters
		|		SUB values
		|		ADD values
		|		PTR values
		|		values PTR
		|		values DOT IDENTIFIER
		|		LPARENTHESIS value_expression RPARENTHESIS
		|		values LBRACKET value_expression RBRACKET
		|		LBRACKET type_description RBRACKET
		;

const_values ::= 
				BOOL_CONST
		| 		CHAR_CONST
		|		INT_CONST
		|		NIL
		;



////////////////////////////////
//////////// stavki ////////////
////////////////////////////////

statement_block ::= 
				BEGIN END
		|		BEGIN statement_list END
		;

statement_list ::= 
				statement
		|		statement_list SEMIC statement
		;

statement ::= 
				if_statement
		|		while_statement
		|		for_statement
		|		final_statement
		;

final_statement ::=
				value_expression
		|		value_expression ASSIGN value_expression
		|		statement_block
		;

while_statement ::= 
				WHILE value_expression DO statement
		;

for_statement ::= 
				FOR IDENTIFIER ASSIGN value_expression TO value_expression DO statement
		;



//////////// if else stavek ////////////

if_statement ::= 
				full_matched_if_statement
		|		unmatched_if_statement
		;

full_matched_if_statement ::= 
				IF value_expression THEN matched_if_statement ELSE matched_if_statement
		;

matched_if_statement ::= 
				no_if_statement
		|		IF value_expression THEN matched_if_statement ELSE matched_if_statement
		;

unmatched_if_statement ::= 
				IF value_expression THEN statement
		|		IF value_expression THEN matched_if_statement ELSE unmatched_if_statement
		;

no_if_statement ::= 
				value_expression
		|		value_expression ASSIGN value_expression
		|		statement_block
		|		matched_if_while_statement
		|		matched_if_for_statement
		;

matched_if_while_statement ::= 
				WHILE value_expression DO matched_if_statement
		;

matched_if_for_statement ::=
				FOR IDENTIFIER ASSIGN value_expression TO value_expression DO matched_if_statement
		;

