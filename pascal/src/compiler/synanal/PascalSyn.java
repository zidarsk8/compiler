
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 01 15:42:40 CEST 2012
//----------------------------------------------------

package compiler.synanal;

import java_cup.runtime.*;
import compiler.report.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 01 15:42:40 CEST 2012
  */
public class PascalSyn extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PascalSyn() {super();}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\004\000\002\004\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\006\004\000\002\007\003\000\002\007" +
    "\004\000\002\010\006\000\002\011\004\000\002\012\003" +
    "\000\002\012\004\000\002\013\006\000\002\014\004\000" +
    "\002\015\003\000\002\015\004\000\002\016\006\000\002" +
    "\017\003\000\002\017\003\000\002\020\005\000\002\021" +
    "\006\000\002\022\005\000\002\023\010\000\002\025\004" +
    "\000\002\025\005\000\002\026\003\000\002\026\005\000" +
    "\002\027\005\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\005\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\033\012\000\002\034\005\000" +
    "\002\035\003\000\002\035\005\000\002\036\005\000\002" +
    "\037\004\000\002\040\003\000\002\040\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\042\002\000\002\024\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\063\006\001\002\000\004\002\157\001" +
    "\002\000\016\016\uffc6\052\030\057\025\062\014\067\021" +
    "\070\020\001\002\000\004\010\007\001\002\000\004\024" +
    "\010\001\002\000\016\016\ufffd\052\ufffd\057\ufffd\062\ufffd" +
    "\067\ufffd\070\ufffd\001\002\000\006\016\uffff\024\uffff\001" +
    "\002\000\020\016\ufffb\024\ufffb\052\ufffb\057\ufffb\062\ufffb" +
    "\067\ufffb\070\ufffb\001\002\000\020\016\uffe8\024\uffe8\052" +
    "\uffe8\057\uffe8\062\uffe8\067\uffe8\070\uffe8\001\002\000\004" +
    "\010\154\001\002\000\020\016\ufffa\024\ufffa\052\ufffa\057" +
    "\ufffa\062\ufffa\067\ufffa\070\ufffa\001\002\000\020\016\ufffc" +
    "\024\ufffc\052\ufffc\057\ufffc\062\ufffc\067\ufffc\070\ufffc\001" +
    "\002\000\004\016\153\001\002\000\004\010\146\001\002" +
    "\000\004\010\136\001\002\000\016\024\uffc6\052\030\057" +
    "\025\062\014\067\021\070\020\001\002\000\020\016\uffe7" +
    "\024\uffe7\052\uffe7\057\uffe7\062\uffe7\067\uffe7\070\uffe7\001" +
    "\002\000\020\016\ufff9\024\ufff9\052\ufff9\057\ufff9\062\ufff9" +
    "\067\ufff9\070\ufff9\001\002\000\004\010\055\001\002\000" +
    "\016\024\uffc6\052\030\057\025\062\014\067\021\070\020" +
    "\001\002\000\020\016\uffc6\024\uffc6\052\030\057\025\062" +
    "\014\067\021\070\020\001\002\000\004\010\033\001\002" +
    "\000\022\010\ufff3\016\ufff3\024\ufff3\052\ufff3\057\ufff3\062" +
    "\ufff3\067\ufff3\070\ufff3\001\002\000\022\010\033\016\ufff4" +
    "\024\ufff4\052\ufff4\057\ufff4\062\ufff4\067\ufff4\070\ufff4\001" +
    "\002\000\004\030\034\001\002\000\014\004\035\005\042" +
    "\006\041\007\043\024\uffc7\001\002\000\010\017\uffcb\022" +
    "\uffcb\024\uffcb\001\002\000\010\017\uffcd\022\uffcd\024\uffcd" +
    "\001\002\000\004\024\044\001\002\000\010\017\uffcc\022" +
    "\uffcc\024\uffcc\001\002\000\010\017\uffc9\022\uffc9\024\uffc9" +
    "\001\002\000\010\017\uffca\022\uffca\024\uffca\001\002\000" +
    "\010\017\uffc8\022\uffc8\024\uffc8\001\002\000\022\010\ufff1" +
    "\016\ufff1\024\ufff1\052\ufff1\057\ufff1\062\ufff1\067\ufff1\070" +
    "\ufff1\001\002\000\022\010\ufff2\016\ufff2\024\ufff2\052\ufff2" +
    "\057\ufff2\062\ufff2\067\ufff2\070\ufff2\001\002\000\006\016" +
    "\ufffe\024\ufffe\001\002\000\020\016\ufff7\024\ufff7\052\ufff7" +
    "\057\ufff7\062\ufff7\067\ufff7\070\ufff7\001\002\000\020\016" +
    "\ufff8\024\ufff8\052\ufff8\057\ufff8\062\ufff8\067\ufff8\070\ufff8" +
    "\001\002\000\020\016\ufff6\024\ufff6\052\ufff6\057\ufff6\062" +
    "\ufff6\067\ufff6\070\ufff6\001\002\000\020\016\ufff5\024\ufff5" +
    "\052\ufff5\057\ufff5\062\ufff5\067\ufff5\070\ufff5\001\002\000" +
    "\004\024\054\001\002\000\020\016\uffe6\024\uffe6\052\uffe6" +
    "\057\uffe6\062\uffe6\067\uffe6\070\uffe6\001\002\000\004\021" +
    "\057\001\002\000\004\014\130\001\002\000\006\010\061" +
    "\023\063\001\002\000\006\023\uffe0\024\uffe0\001\002\000" +
    "\004\014\067\001\002\000\006\023\065\024\064\001\002" +
    "\000\006\014\uffe2\024\uffe2\001\002\000\004\010\061\001" +
    "\002\000\006\014\uffe1\024\uffe1\001\002\000\006\023\uffdf" +
    "\024\uffdf\001\002\000\022\010\102\011\072\012\105\013" +
    "\070\021\071\042\100\047\073\064\074\001\002\000\010" +
    "\023\uffd7\024\uffd7\055\uffd7\001\002\000\022\010\102\011" +
    "\072\012\105\013\070\021\071\042\100\047\073\064\074" +
    "\001\002\000\010\023\uffd8\024\uffd8\055\uffd8\001\002\000" +
    "\004\020\117\001\002\000\004\010\110\001\002\000\010" +
    "\023\uffd6\024\uffd6\055\uffd6\001\002\000\006\023\uffde\024" +
    "\uffde\001\002\000\010\023\uffdd\024\uffdd\055\uffdd\001\002" +
    "\000\022\010\102\011\072\012\105\013\070\021\071\042" +
    "\100\047\073\064\074\001\002\000\010\023\uffd5\024\uffd5" +
    "\055\uffd5\001\002\000\010\023\uffdb\024\uffdb\055\uffdb\001" +
    "\002\000\010\023\uffdc\024\uffdc\055\uffdc\001\002\000\010" +
    "\023\uffd4\024\uffd4\055\uffd4\001\002\000\010\023\uffd9\024" +
    "\uffd9\055\uffd9\001\002\000\010\023\uffce\024\uffce\055\uffce" +
    "\001\002\000\006\024\uffd1\055\uffd1\001\002\000\004\014" +
    "\115\001\002\000\006\024\112\055\113\001\002\000\004" +
    "\010\110\001\002\000\010\023\uffd2\024\uffd2\055\uffd2\001" +
    "\002\000\006\024\uffd0\055\uffd0\001\002\000\022\010\102" +
    "\011\072\012\105\013\070\021\071\042\100\047\073\064" +
    "\074\001\002\000\006\024\uffcf\055\uffcf\001\002\000\014" +
    "\004\035\005\042\006\041\007\043\017\uffc7\001\002\000" +
    "\004\017\121\001\002\000\014\004\035\005\042\006\041" +
    "\007\043\022\uffc7\001\002\000\004\022\123\001\002\000" +
    "\004\061\124\001\002\000\022\010\102\011\072\012\105" +
    "\013\070\021\071\042\100\047\073\064\074\001\002\000" +
    "\010\023\uffd3\024\uffd3\055\uffd3\001\002\000\004\023\127" +
    "\001\002\000\010\023\uffda\024\uffda\055\uffda\001\002\000" +
    "\022\010\102\011\072\012\105\013\070\021\071\042\100" +
    "\047\073\064\074\001\002\000\004\024\132\001\002\000" +
    "\016\024\uffe3\052\uffe3\057\uffe3\062\uffe3\067\uffe3\070\uffe3" +
    "\001\002\000\004\024\134\001\002\000\020\016\uffe4\024" +
    "\uffe4\052\uffe4\057\uffe4\062\uffe4\067\uffe4\070\uffe4\001\002" +
    "\000\022\010\uffef\016\uffef\024\uffef\052\uffef\057\uffef\062" +
    "\uffef\067\uffef\070\uffef\001\002\000\004\030\141\001\002" +
    "\000\022\010\136\016\ufff0\024\ufff0\052\ufff0\057\ufff0\062" +
    "\ufff0\067\ufff0\070\ufff0\001\002\000\022\010\uffee\016\uffee" +
    "\024\uffee\052\uffee\057\uffee\062\uffee\067\uffee\070\uffee\001" +
    "\002\000\022\010\102\011\072\012\105\013\070\021\071" +
    "\042\100\047\073\064\074\001\002\000\004\024\143\001" +
    "\002\000\022\010\uffed\016\uffed\024\uffed\052\uffed\057\uffed" +
    "\062\uffed\067\uffed\070\uffed\001\002\000\020\016\uffec\024" +
    "\uffec\052\uffec\057\uffec\062\uffec\067\uffec\070\uffec\001\002" +
    "\000\022\010\146\016\uffeb\024\uffeb\052\uffeb\057\uffeb\062" +
    "\uffeb\067\uffeb\070\uffeb\001\002\000\004\014\147\001\002" +
    "\000\022\010\102\011\072\012\105\013\070\021\071\042" +
    "\100\047\073\064\074\001\002\000\004\024\151\001\002" +
    "\000\022\010\uffe9\016\uffe9\024\uffe9\052\uffe9\057\uffe9\062" +
    "\uffe9\067\uffe9\070\uffe9\001\002\000\020\016\uffea\024\uffea" +
    "\052\uffea\057\uffea\062\uffea\067\uffea\070\uffea\001\002\000" +
    "\004\002\000\001\002\000\004\021\057\001\002\000\004" +
    "\024\156\001\002\000\016\024\uffe5\052\uffe5\057\uffe5\062" +
    "\uffe5\067\uffe5\070\uffe5\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\006\002\003\004\004\001\001\000\002\001" +
    "\001\000\030\003\016\005\026\006\015\011\011\014\014" +
    "\017\023\020\012\021\025\022\022\023\021\024\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\143\016\144\001\001\000\006\012" +
    "\136\013\134\001\001\000\030\003\132\005\026\006\015" +
    "\011\011\014\014\017\023\020\012\021\025\022\022\023" +
    "\021\024\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\052\005\026\006\015\011" +
    "\011\014\014\017\023\020\012\021\025\022\022\023\021" +
    "\024\010\001\001\000\024\006\047\011\046\014\050\017" +
    "\051\020\012\021\025\022\022\023\021\024\045\001\001" +
    "\000\006\007\031\010\030\001\001\000\002\001\001\000" +
    "\004\010\044\001\001\000\002\001\001\000\010\040\036" +
    "\041\035\042\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\055\001\001\000\002" +
    "\001\001\000\006\026\061\027\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\030\075\031\076\032\102\033\074\034\100" +
    "\037\103\001\001\000\002\001\001\000\016\030\125\031" +
    "\076\032\102\033\074\034\100\037\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\035\110\036\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\030\105\031\076\032\102\033\074\034\100\037" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\030\115\031\076\032\102\033\074\034\100" +
    "\037\103\001\001\000\002\001\001\000\010\040\117\041" +
    "\035\042\037\001\001\000\002\001\001\000\010\040\121" +
    "\041\035\042\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\030\124\031\076\032\102\033\074\034\100" +
    "\037\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\030\130\031\076\032\102\033\074" +
    "\034\100\037\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\137\001\001\000\002\001" +
    "\001\000\016\030\141\031\076\032\102\033\074\034\100" +
    "\037\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\151\016\144\001\001\000\002" +
    "\001\001\000\016\030\147\031\076\032\102\033\074\034" +
    "\100\037\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PascalSyn$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PascalSyn$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PascalSyn$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }
        
        public void report_error(String message, Object info) {
        }
        
        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PascalSyn$actions {
  private final PascalSyn parser;

  /** Constructor */
  CUP$PascalSyn$actions(PascalSyn parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PascalSyn$do_action(
    int                        CUP$PascalSyn$act_num,
    java_cup.runtime.lr_parser CUP$PascalSyn$parser,
    java.util.Stack            CUP$PascalSyn$stack,
    int                        CUP$PascalSyn$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PascalSyn$result;

      /* select the action based on the action number */
      switch (CUP$PascalSyn$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement_block ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement_block",18, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // binary_expression ::= 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("binary_expression",32, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // const_values ::= NIL 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_values",31, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // const_values ::= INT_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_values",31, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // const_values ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_values",31, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // const_values ::= BOOL_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_values",31, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // value_expression ::= binary_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",30, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // value_expression ::= const_values 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",30, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_pointer ::= PTR type_description 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_pointer",29, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // single_record_component ::= IDENTIFIER COLON type_description 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("single_record_component",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // record_components ::= record_components SEMIC single_record_component 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("record_components",27, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // record_components ::= single_record_component 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("record_components",27, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_record ::= RECORD record_components END 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_record",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type_array ::= ARRAY LBRACKET value_expression DOTS value_expression RBRACKET OF type_description 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_array",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // reference_type ::= type_pointer 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("reference_type",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // reference_type ::= type_record 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("reference_type",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // reference_type ::= type_array 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("reference_type",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // primitive_type ::= INT 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("primitive_type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // primitive_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("primitive_type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // primitive_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("primitive_type",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_description ::= LPARENTHESIS type_description RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_description",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_description ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_description",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_description ::= reference_type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_description",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_description ::= primitive_type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_description",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // single_parameter ::= IDENTIFIER COLON type_description 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("single_parameter",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parameter_list ::= parameter_list SEMIC single_parameter 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter_list",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameter_list ::= single_parameter 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter_list",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter_declaration ::= LPARENTHESIS parameter_list RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter_declaration",19, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameter_declaration ::= LPARENTHESIS RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter_declaration",19, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function_name ::= FUNCTION IDENTIFIER parameter_declaration COLON type_description SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("function_name",17, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // subrutine_function ::= function_name source_body SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subrutine_function",16, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procedure_name ::= PROCEDURE IDENTIFIER parameter_declaration SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("procedure_name",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // subrutine_procedure ::= procedure_name source_body SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subrutine_procedure",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declarations_subrutine ::= subrutine_function 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_subrutine",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarations_subrutine ::= subrutine_procedure 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_subrutine",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // single_var ::= IDENTIFIER COLON type_description SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("single_var",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // var_list ::= single_var var_list 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_list",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_list ::= single_var 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_list",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarations_var ::= VAR var_list 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_var",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // single_type ::= IDENTIFIER EQU type_description SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("single_type",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_list ::= type_list single_type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_list",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_list ::= single_type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_list",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarations_type ::= TYPE type_list 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_type",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // single_const ::= IDENTIFIER EQU value_expression SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("single_const",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // const_list ::= const_list single_const 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_list",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // const_list ::= single_const 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_list",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarations_const ::= CONST const_list 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_const",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarations ::= declarations declarations_subrutine 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declarations ::= declarations declarations_var 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declarations ::= declarations declarations_type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declarations ::= declarations declarations_const 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declarations ::= declarations_subrutine 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarations ::= declarations_var 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarations ::= declarations_type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= declarations_const 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_name ::= PROGRAM IDENTIFIER SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("program_name",2, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // source_body ::= declarations statement_block 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("source_body",1, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // source_body ::= statement_block 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("source_body",1, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // source ::= program_name source_body DOT 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("source",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= source EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		RESULT = start_val;
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PascalSyn$parser.done_parsing();
          return CUP$PascalSyn$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

