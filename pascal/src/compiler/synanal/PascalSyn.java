
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 02 01:18:31 CEST 2012
//----------------------------------------------------

package compiler.synanal;

import java_cup.runtime.*;
import compiler.report.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 02 01:18:31 CEST 2012
  */
public class PascalSyn extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PascalSyn() {super();}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PascalSyn(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\004\003\000\002\004\004\000\002\005\003" +
    "\000\002\006\004\000\002\006\005\000\002\006\003\000" +
    "\002\007\003\000\002\007\004\000\002\010\006\000\002" +
    "\011\004\000\002\011\005\000\002\011\003\000\002\012" +
    "\003\000\002\012\004\000\002\013\006\000\002\014\004" +
    "\000\002\014\005\000\002\014\003\000\002\015\003\000" +
    "\002\015\004\000\002\016\006\000\002\017\003\000\002" +
    "\017\003\000\002\017\004\000\002\017\004\000\002\020" +
    "\005\000\002\021\006\000\002\022\005\000\002\023\010" +
    "\000\002\024\004\000\002\024\005\000\002\025\003\000" +
    "\002\025\005\000\002\026\005\000\002\027\004\000\002" +
    "\027\005\000\002\030\003\000\002\030\005\000\002\031" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\005\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\035\012\000\002\036\005\000\002\037" +
    "\003\000\002\037\005\000\002\040\005\000\002\041\004" +
    "\000\002\042\003\000\002\044\003\000\002\044\005\000" +
    "\002\045\003\000\002\045\005\000\002\046\003\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\047\003" +
    "\000\002\047\005\000\002\047\005\000\002\050\003\000" +
    "\002\050\005\000\002\050\005\000\002\051\003\000\002" +
    "\051\004\000\002\053\003\000\002\053\004\000\002\052" +
    "\003\000\002\052\004\000\002\052\004\000\002\052\004" +
    "\000\002\054\003\000\002\054\003\000\002\054\005\000" +
    "\002\054\006\000\002\054\005\000\002\054\004\000\002" +
    "\054\005\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\055\004\000\002\055\005" +
    "\000\002\056\003\000\002\056\005\000\002\057\003\000" +
    "\002\057\003\000\002\060\006\000\002\060\010\000\002" +
    "\061\003\000\002\061\010\000\002\062\003\000\002\062" +
    "\005\000\002\062\003\000\002\063\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\004\063\006\001\002\000\004\002\307\001" +
    "\002\000\016\051\027\052\031\057\025\062\013\067\021" +
    "\070\020\001\002\000\004\010\007\001\002\000\004\024" +
    "\010\001\002\000\016\051\uffff\052\uffff\057\uffff\062\uffff" +
    "\067\uffff\070\uffff\001\002\000\006\016\ufffe\024\ufffe\001" +
    "\002\000\004\051\ufff9\001\002\000\004\010\304\001\002" +
    "\000\010\051\uffe9\057\uffe9\062\uffe9\001\002\000\004\051" +
    "\ufff3\001\002\000\004\051\ufffc\001\002\000\004\016\303" +
    "\001\002\000\004\010\274\001\002\000\004\010\264\001" +
    "\002\000\016\051\027\052\031\057\025\062\013\067\021" +
    "\070\020\001\002\000\010\051\uffe8\057\uffe8\062\uffe8\001" +
    "\002\000\010\051\uffed\057\025\062\013\001\002\000\004" +
    "\010\240\001\002\000\016\051\027\052\031\057\025\062" +
    "\013\067\021\070\020\001\002\000\036\004\046\005\063" +
    "\006\053\007\051\010\045\020\050\021\057\025\060\040" +
    "\043\042\040\043\052\055\214\060\215\071\212\001\002" +
    "\000\004\051\027\001\002\000\004\010\034\001\002\000" +
    "\016\010\ufff8\051\ufff8\057\ufff8\062\ufff8\067\ufff8\070\ufff8" +
    "\001\002\000\016\010\034\051\ufffb\057\025\062\013\067" +
    "\021\070\020\001\002\000\004\030\035\001\002\000\030" +
    "\004\046\005\063\006\053\007\051\010\045\020\050\021" +
    "\057\025\060\040\043\042\040\043\052\001\002\000\064" +
    "\015\uffad\016\uffad\017\uffad\020\uffad\022\uffad\023\uffad\024" +
    "\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad" +
    "\033\uffad\034\uffad\036\uffad\037\uffad\041\uffad\042\uffad\043" +
    "\uffad\050\uffad\053\uffad\054\uffad\055\uffad\065\uffad\001\002" +
    "\000\064\015\uffb1\016\067\017\uffb1\020\066\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\036\uffb1\037\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\050\uffb1\053\uffb1\054\uffb1\055\uffb1\065\uffb1" +
    "\001\002\000\020\004\046\005\063\006\053\007\051\010" +
    "\045\020\050\021\057\001\002\000\030\015\uffc7\017\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\041\200\050\uffc7\053\uffc7\054" +
    "\uffc7\055\uffc7\065\uffc7\001\002\000\056\015\uffbb\017\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\110\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036\107\037\uffbb" +
    "\041\uffbb\043\uffbb\050\uffbb\053\uffbb\054\uffbb\055\uffbb\065" +
    "\uffbb\001\002\000\026\004\046\005\063\006\053\007\051" +
    "\010\045\020\050\021\057\025\060\042\040\043\052\001" +
    "\002\000\056\015\uffb5\017\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\036\uffb5\037\uffb5\041\uffb5\043\uffb5\050\uffb5" +
    "\053\uffb5\054\uffb5\055\uffb5\065\uffb5\001\002\000\066\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\167\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032" +
    "\uffac\033\uffac\034\uffac\036\uffac\037\uffac\041\uffac\042\uffac" +
    "\043\uffac\050\uffac\053\uffac\054\uffac\055\uffac\065\uffac\001" +
    "\002\000\064\015\uffa6\016\uffa6\017\uffa6\020\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\036\uffa6\037\uffa6\041\uffa6" +
    "\042\uffa6\043\uffa6\050\uffa6\053\uffa6\054\uffa6\055\uffa6\065" +
    "\uffa6\001\002\000\032\015\uffc6\017\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\026\164\041\uffc6\050\uffc6\053\uffc6\054\uffc6\055" +
    "\uffc6\065\uffc6\001\002\000\022\010\135\011\125\012\140" +
    "\013\123\021\124\042\133\047\126\064\130\001\002\000" +
    "\064\015\uffa3\016\uffa3\017\uffa3\020\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\036\uffa3\037\uffa3\041\uffa3\042\uffa3" +
    "\043\uffa3\050\uffa3\053\uffa3\054\uffa3\055\uffa3\065\uffa3\001" +
    "\002\000\020\004\046\005\063\006\053\007\051\010\045" +
    "\020\050\021\057\001\002\000\064\015\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\036" +
    "\uffa4\037\uffa4\041\uffa4\042\uffa4\043\uffa4\050\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\065\uffa4\001\002\000\052\015\uffc2\017" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\105\026\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\037\uffc2\041\uffc2\043" +
    "\104\050\uffc2\053\uffc2\054\uffc2\055\uffc2\065\uffc2\001\002" +
    "\000\004\024\121\001\002\000\046\015\uffc4\017\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\026\uffc4\030\102\031\076\032\101" +
    "\033\077\034\075\037\100\041\uffc4\050\uffc4\053\uffc4\054" +
    "\uffc4\055\uffc4\065\uffc4\001\002\000\030\004\046\005\063" +
    "\006\053\007\051\010\045\020\050\021\057\025\060\040" +
    "\043\042\040\043\052\001\002\000\020\004\046\005\063" +
    "\006\053\007\051\010\045\020\050\021\057\001\002\000" +
    "\056\015\uffb8\017\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\036\uffb8\037\uffb8\041\uffb8\043\uffb8\050\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\065\uffb8\001\002\000\060\015\uffb3\017" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\036\uffb3\037" +
    "\uffb3\041\uffb3\042\064\043\uffb3\050\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\065\uffb3\001\002\000\064\015\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5" +
    "\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\036" +
    "\uffa5\037\uffa5\041\uffa5\042\uffa5\043\uffa5\050\uffa5\053\uffa5" +
    "\054\uffa5\055\uffa5\065\uffa5\001\002\000\056\015\uffb2\017" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\036\uffb2\037" +
    "\uffb2\041\uffb2\043\uffb2\050\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\065\uffb2\001\002\000\064\015\uffaf\016\067\017\uffaf\020" +
    "\066\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\036\uffaf\037" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\050\uffaf\053\uffaf\054\uffaf" +
    "\055\uffaf\065\uffaf\001\002\000\030\004\046\005\063\006" +
    "\053\007\051\010\045\020\050\021\057\025\060\040\043" +
    "\042\040\043\052\001\002\000\004\010\070\001\002\000" +
    "\064\015\uffa9\016\uffa9\017\uffa9\020\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\036\uffa9\037\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\050\uffa9\053\uffa9\054\uffa9\055\uffa9\065\uffa9\001" +
    "\002\000\004\022\072\001\002\000\064\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa" +
    "\036\uffaa\037\uffaa\041\uffaa\042\uffaa\043\uffaa\050\uffaa\053" +
    "\uffaa\054\uffaa\055\uffaa\065\uffaa\001\002\000\004\023\074" +
    "\001\002\000\064\015\uffab\016\uffab\017\uffab\020\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\036\uffab\037\uffab\041" +
    "\uffab\042\uffab\043\uffab\050\uffab\053\uffab\054\uffab\055\uffab" +
    "\065\uffab\001\002\000\030\004\046\005\063\006\053\007" +
    "\051\010\045\020\050\021\057\025\060\040\043\042\040" +
    "\043\052\001\002\000\030\004\046\005\063\006\053\007" +
    "\051\010\045\020\050\021\057\025\060\040\043\042\040" +
    "\043\052\001\002\000\030\004\046\005\063\006\053\007" +
    "\051\010\045\020\050\021\057\025\060\040\043\042\040" +
    "\043\052\001\002\000\030\004\046\005\063\006\053\007" +
    "\051\010\045\020\050\021\057\025\060\040\043\042\040" +
    "\043\052\001\002\000\030\004\046\005\063\006\053\007" +
    "\051\010\045\020\050\021\057\025\060\040\043\042\040" +
    "\043\052\001\002\000\030\004\046\005\063\006\053\007" +
    "\051\010\045\020\050\021\057\025\060\040\043\042\040" +
    "\043\052\001\002\000\052\015\uffc1\017\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\105\026\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\037\uffc1\041\uffc1\043\104\050\uffc1\053" +
    "\uffc1\054\uffc1\055\uffc1\065\uffc1\001\002\000\030\004\046" +
    "\005\063\006\053\007\051\010\045\020\050\021\057\025" +
    "\060\040\043\042\040\043\052\001\002\000\030\004\046" +
    "\005\063\006\053\007\051\010\045\020\050\021\057\025" +
    "\060\040\043\042\040\043\052\001\002\000\056\015\uffba" +
    "\017\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\110\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\036\107" +
    "\037\uffba\041\uffba\043\uffba\050\uffba\053\uffba\054\uffba\055" +
    "\uffba\065\uffba\001\002\000\030\004\046\005\063\006\053" +
    "\007\051\010\045\020\050\021\057\025\060\040\043\042" +
    "\040\043\052\001\002\000\030\004\046\005\063\006\053" +
    "\007\051\010\045\020\050\021\057\025\060\040\043\042" +
    "\040\043\052\001\002\000\056\015\uffb6\017\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6\037\uffb6\041\uffb6" +
    "\043\uffb6\050\uffb6\053\uffb6\054\uffb6\055\uffb6\065\uffb6\001" +
    "\002\000\056\015\uffb7\017\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\036\uffb7\037\uffb7\041\uffb7\043\uffb7\050\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\065\uffb7\001\002\000\056\015" +
    "\uffb9\017\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\027\110\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\036" +
    "\107\037\uffb9\041\uffb9\043\uffb9\050\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\065\uffb9\001\002\000\052\015\uffbf\017\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\105\026\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\037\uffbf\041\uffbf\043\104\050" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\065\uffbf\001\002\000\052" +
    "\015\uffc0\017\uffc0\022\uffc0\023\uffc0\024\uffc0\025\105\026" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\037\uffc0" +
    "\041\uffc0\043\104\050\uffc0\053\uffc0\054\uffc0\055\uffc0\065" +
    "\uffc0\001\002\000\052\015\uffbd\017\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\105\026\uffbd\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\037\uffbd\041\uffbd\043\104\050\uffbd\053\uffbd" +
    "\054\uffbd\055\uffbd\065\uffbd\001\002\000\052\015\uffbc\017" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\025\105\026\uffbc\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\037\uffbc\041\uffbc\043" +
    "\104\050\uffbc\053\uffbc\054\uffbc\055\uffbc\065\uffbc\001\002" +
    "\000\052\015\uffbe\017\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\105\026\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\037\uffbe\041\uffbe\043\104\050\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\065\uffbe\001\002\000\016\010\ufff6\051\ufff6\057\ufff6" +
    "\062\ufff6\067\ufff6\070\ufff6\001\002\000\064\015\uffb0\016" +
    "\067\017\uffb0\020\066\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\036\uffb0\037\uffb0\041\uffb0\042\uffb0\043\uffb0\050\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\065\uffb0\001\002\000\012\022" +
    "\uffd1\023\uffd1\024\uffd1\055\uffd1\001\002\000\022\010\135" +
    "\011\125\012\140\013\123\021\124\042\133\047\126\064" +
    "\130\001\002\000\012\022\uffd2\023\uffd2\024\uffd2\055\uffd2" +
    "\001\002\000\004\020\153\001\002\000\012\022\uffd0\023" +
    "\uffd0\024\uffd0\055\uffd0\001\002\000\004\010\144\001\002" +
    "\000\004\022\142\001\002\000\012\022\uffd7\023\uffd7\024" +
    "\uffd7\055\uffd7\001\002\000\022\010\135\011\125\012\140" +
    "\013\123\021\124\042\133\047\126\064\130\001\002\000" +
    "\012\022\uffcf\023\uffcf\024\uffcf\055\uffcf\001\002\000\012" +
    "\022\uffd5\023\uffd5\024\uffd5\055\uffd5\001\002\000\012\022" +
    "\uffd6\023\uffd6\024\uffd6\055\uffd6\001\002\000\012\022\uffce" +
    "\023\uffce\024\uffce\055\uffce\001\002\000\012\022\uffd3\023" +
    "\uffd3\024\uffd3\055\uffd3\001\002\000\012\022\uffc8\023\uffc8" +
    "\024\uffc8\055\uffc8\001\002\000\064\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\036" +
    "\uffa7\037\uffa7\041\uffa7\042\uffa7\043\uffa7\050\uffa7\053\uffa7" +
    "\054\uffa7\055\uffa7\065\uffa7\001\002\000\006\024\uffcb\055" +
    "\uffcb\001\002\000\004\014\151\001\002\000\006\024\146" +
    "\055\147\001\002\000\004\010\144\001\002\000\012\022" +
    "\uffcc\023\uffcc\024\uffcc\055\uffcc\001\002\000\006\024\uffca" +
    "\055\uffca\001\002\000\022\010\135\011\125\012\140\013" +
    "\123\021\124\042\133\047\126\064\130\001\002\000\006" +
    "\024\uffc9\055\uffc9\001\002\000\030\004\046\005\063\006" +
    "\053\007\051\010\045\020\050\021\057\025\060\040\043" +
    "\042\040\043\052\001\002\000\004\017\155\001\002\000" +
    "\030\004\046\005\063\006\053\007\051\010\045\020\050" +
    "\021\057\025\060\040\043\042\040\043\052\001\002\000" +
    "\004\022\157\001\002\000\004\061\160\001\002\000\022" +
    "\010\135\011\125\012\140\013\123\021\124\042\133\047" +
    "\126\064\130\001\002\000\012\022\uffcd\023\uffcd\024\uffcd" +
    "\055\uffcd\001\002\000\004\023\163\001\002\000\012\022" +
    "\uffd4\023\uffd4\024\uffd4\055\uffd4\001\002\000\030\004\046" +
    "\005\063\006\053\007\051\010\045\020\050\021\057\025" +
    "\060\040\043\042\040\043\052\001\002\000\046\015\uffc3" +
    "\017\uffc3\022\uffc3\023\uffc3\024\uffc3\026\uffc3\030\102\031" +
    "\076\032\101\033\077\034\075\037\100\041\uffc3\050\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\065\uffc3\001\002\000\064\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\022\uffa8\023\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\036\uffa8\037\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\050\uffa8\053\uffa8\054\uffa8\055\uffa8\065\uffa8\001\002\000" +
    "\032\004\046\005\063\006\053\007\051\010\045\020\050" +
    "\021\057\023\171\025\060\040\043\042\040\043\052\001" +
    "\002\000\006\015\uffd8\023\uffd8\001\002\000\064\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\036\uffdc\037\uffdc\041\uffdc\042\uffdc\043\uffdc\050" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\065\uffdc\001\002\000\006" +
    "\015\174\023\175\001\002\000\006\015\uffda\023\uffda\001" +
    "\002\000\030\004\046\005\063\006\053\007\051\010\045" +
    "\020\050\021\057\025\060\040\043\042\040\043\052\001" +
    "\002\000\064\015\uffdb\016\uffdb\017\uffdb\020\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\036\uffdb\037\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\050\uffdb\053\uffdb\054\uffdb\055\uffdb\065" +
    "\uffdb\001\002\000\006\015\uffd9\023\uffd9\001\002\000\056" +
    "\015\uffb4\017\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\036\uffb4\037\uffb4\041\uffb4\043\uffb4\050\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\065\uffb4\001\002\000\030\004\046\005\063" +
    "\006\053\007\051\010\045\020\050\021\057\025\060\040" +
    "\043\042\040\043\052\001\002\000\032\015\uffc5\017\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\026\164\041\uffc5\050\uffc5\053" +
    "\uffc5\054\uffc5\055\uffc5\065\uffc5\001\002\000\064\015\uffae" +
    "\016\067\017\uffae\020\066\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae" +
    "\034\uffae\036\uffae\037\uffae\041\uffae\042\uffae\043\uffae\050" +
    "\uffae\053\uffae\054\uffae\055\uffae\065\uffae\001\002\000\004" +
    "\051\ufffa\001\002\000\016\010\ufff7\051\ufff7\057\ufff7\062" +
    "\ufff7\067\ufff7\070\ufff7\001\002\000\006\016\ufffd\024\ufffd" +
    "\001\002\000\006\024\uffa0\055\uffa0\001\002\000\006\024" +
    "\uff9d\055\uff9d\001\002\000\006\024\uff9e\055\uff9e\001\002" +
    "\000\010\024\uff9a\054\uff9a\055\uff9a\001\002\000\030\004" +
    "\046\005\063\006\053\007\051\010\045\020\050\021\057" +
    "\025\060\040\043\042\040\043\052\001\002\000\010\024" +
    "\uff96\054\uff96\055\uff96\001\002\000\006\016\uffa2\024\uffa2" +
    "\001\002\000\030\004\046\005\063\006\053\007\051\010" +
    "\045\020\050\021\057\025\060\040\043\042\040\043\052" +
    "\001\002\000\006\024\222\055\223\001\002\000\012\024" +
    "\uff98\050\220\054\uff98\055\uff98\001\002\000\030\004\046" +
    "\005\063\006\053\007\051\010\045\020\050\021\057\025" +
    "\060\040\043\042\040\043\052\001\002\000\010\024\uff97" +
    "\054\uff97\055\uff97\001\002\000\034\004\046\005\063\006" +
    "\053\007\051\010\045\020\050\021\057\025\060\040\043" +
    "\042\040\043\052\060\215\071\212\001\002\000\006\016" +
    "\uffa1\024\uffa1\001\002\000\006\024\uff9f\055\uff9f\001\002" +
    "\000\004\065\226\001\002\000\034\004\046\005\063\006" +
    "\053\007\051\010\045\020\050\021\057\025\060\040\043" +
    "\042\040\043\052\060\215\071\212\001\002\000\006\024" +
    "\uff9c\055\uff9c\001\002\000\010\024\uff9e\054\231\055\uff9e" +
    "\001\002\000\034\004\046\005\063\006\053\007\051\010" +
    "\045\020\050\021\057\025\060\040\043\042\040\043\052" +
    "\060\215\071\212\001\002\000\006\024\uff9b\055\uff9b\001" +
    "\002\000\010\024\uff99\054\uff99\055\uff99\001\002\000\004" +
    "\053\235\001\002\000\010\024\uff95\054\uff95\055\uff95\001" +
    "\002\000\004\024\237\001\002\000\010\051\uffe5\057\uffe5" +
    "\062\uffe5\001\002\000\004\021\242\001\002\000\004\014" +
    "\254\001\002\000\006\010\244\023\245\001\002\000\006" +
    "\023\252\024\251\001\002\000\004\014\247\001\002\000" +
    "\006\014\uffe1\024\uffe1\001\002\000\006\023\uffdf\024\uffdf" +
    "\001\002\000\022\010\135\011\125\012\140\013\123\021" +
    "\124\042\133\047\126\064\130\001\002\000\006\023\uffdd" +
    "\024\uffdd\001\002\000\004\010\244\001\002\000\006\014" +
    "\uffe0\024\uffe0\001\002\000\006\023\uffde\024\uffde\001\002" +
    "\000\022\010\135\011\125\012\140\013\123\021\124\042" +
    "\133\047\126\064\130\001\002\000\004\024\256\001\002" +
    "\000\016\051\uffe2\052\uffe2\057\uffe2\062\uffe2\067\uffe2\070" +
    "\uffe2\001\002\000\010\051\uffe7\057\uffe7\062\uffe7\001\002" +
    "\000\010\051\uffe6\057\uffe6\062\uffe6\001\002\000\004\024" +
    "\262\001\002\000\010\051\uffe3\057\uffe3\062\uffe3\001\002" +
    "\000\014\010\ufff2\051\ufff2\057\ufff2\062\ufff2\070\ufff2\001" +
    "\002\000\004\030\270\001\002\000\014\010\264\051\ufff5" +
    "\057\025\062\013\070\020\001\002\000\014\010\ufff1\051" +
    "\ufff1\057\ufff1\062\ufff1\070\ufff1\001\002\000\004\051\ufff4" +
    "\001\002\000\022\010\135\011\125\012\140\013\123\021" +
    "\124\042\133\047\126\064\130\001\002\000\004\024\272" +
    "\001\002\000\014\010\ufff0\051\ufff0\057\ufff0\062\ufff0\070" +
    "\ufff0\001\002\000\010\051\uffef\057\025\062\013\001\002" +
    "\000\004\014\277\001\002\000\012\010\274\051\uffec\057" +
    "\uffec\062\uffec\001\002\000\010\051\uffeb\057\uffeb\062\uffeb" +
    "\001\002\000\022\010\135\011\125\012\140\013\123\021" +
    "\124\042\133\047\126\064\130\001\002\000\004\024\301" +
    "\001\002\000\012\010\uffea\051\uffea\057\uffea\062\uffea\001" +
    "\002\000\010\051\uffee\057\025\062\013\001\002\000\004" +
    "\002\000\001\002\000\004\021\242\001\002\000\004\024" +
    "\306\001\002\000\016\051\uffe4\052\uffe4\057\uffe4\062\uffe4" +
    "\067\uffe4\070\uffe4\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\030\004\016\005\027\006\015\011\011\014\014" +
    "\017\023\020\013\021\025\022\022\023\021\055\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\272\016\274\001\001\000\006\012" +
    "\264\013\262\001\001\000\030\004\260\005\027\006\015" +
    "\011\011\014\014\017\023\020\013\021\025\022\022\023" +
    "\021\055\010\001\001\000\002\001\001\000\012\020\256" +
    "\021\025\022\257\023\021\001\001\000\002\001\001\000" +
    "\030\004\235\005\027\006\015\011\011\014\014\017\023" +
    "\020\013\021\025\022\022\023\021\055\010\001\001\000" +
    "\044\042\216\043\035\044\040\045\046\046\055\047\053" +
    "\050\041\051\060\052\061\053\043\054\036\056\215\057" +
    "\205\060\206\061\207\062\210\063\212\001\001\000\004" +
    "\055\204\001\001\000\006\007\032\010\031\001\001\000" +
    "\002\001\001\000\022\010\203\011\202\014\014\017\023" +
    "\020\013\021\025\022\022\023\021\001\001\000\002\001" +
    "\001\000\030\042\054\043\035\044\040\045\046\046\055" +
    "\047\053\050\041\051\060\052\061\053\043\054\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\035" +
    "\054\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\043\035\052\061\053\176\054\036\001\001\000\002" +
    "\001\001\000\004\027\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\032\130\033\131\034\135\035\126" +
    "\036\133\041\136\001\001\000\002\001\001\000\006\043" +
    "\035\054\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\042\072\043" +
    "\035\044\040\045\046\046\055\047\053\050\041\051\060" +
    "\052\061\053\043\054\036\001\001\000\006\043\035\054" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\042" +
    "\070\043\035\044\040\045\046\046\055\047\053\050\041" +
    "\051\060\052\061\053\043\054\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\043\035\047" +
    "\117\050\041\051\060\052\061\053\043\054\036\001\001" +
    "\000\020\043\035\047\116\050\041\051\060\052\061\053" +
    "\043\054\036\001\001\000\020\043\035\047\115\050\041" +
    "\051\060\052\061\053\043\054\036\001\001\000\020\043" +
    "\035\047\114\050\041\051\060\052\061\053\043\054\036" +
    "\001\001\000\020\043\035\047\113\050\041\051\060\052" +
    "\061\053\043\054\036\001\001\000\020\043\035\047\102" +
    "\050\041\051\060\052\061\053\043\054\036\001\001\000" +
    "\002\001\001\000\016\043\035\050\112\051\060\052\061" +
    "\053\043\054\036\001\001\000\016\043\035\050\105\051" +
    "\060\052\061\053\043\054\036\001\001\000\002\001\001" +
    "\000\014\043\035\051\111\052\061\053\043\054\036\001" +
    "\001\000\014\043\035\051\110\052\061\053\043\054\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\032\161\033\131" +
    "\034\135\035\126\036\133\041\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\144" +
    "\040\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\032\140\033\131\034\135\035\126\036\133\041\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\032\151\033\131\034\135\035" +
    "\126\036\133\041\136\001\001\000\002\001\001\000\030" +
    "\042\153\043\035\044\040\045\046\046\055\047\053\050" +
    "\041\051\060\052\061\053\043\054\036\001\001\000\002" +
    "\001\001\000\030\042\155\043\035\044\040\045\046\046" +
    "\055\047\053\050\041\051\060\052\061\053\043\054\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\032" +
    "\160\033\131\034\135\035\126\036\133\041\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\043\035\046\164\047\053\050\041\051\060\052\061" +
    "\053\043\054\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\030\171\031\172\042\167\043\035\044\040" +
    "\045\046\046\055\047\053\050\041\051\060\052\061\053" +
    "\043\054\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\031\175\042" +
    "\167\043\035\044\040\045\046\046\055\047\053\050\041" +
    "\051\060\052\061\053\043\054\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\043\035" +
    "\045\200\046\055\047\053\050\041\051\060\052\061\053" +
    "\043\054\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\042\233\043\035\044\040\045\046\046" +
    "\055\047\053\050\041\051\060\052\061\053\043\054\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\042" +
    "\224\043\035\044\040\045\046\046\055\047\053\050\041" +
    "\051\060\052\061\053\043\054\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\042\220\043\035\044\040" +
    "\045\046\046\055\047\053\050\041\051\060\052\061\053" +
    "\043\054\036\001\001\000\002\001\001\000\042\042\216" +
    "\043\035\044\040\045\046\046\055\047\053\050\041\051" +
    "\060\052\061\053\043\054\036\057\223\060\206\061\207" +
    "\062\210\063\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\042\216\043\035\044\040" +
    "\045\046\046\055\047\053\050\041\051\060\052\061\053" +
    "\043\054\036\057\226\060\206\061\227\062\210\063\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\042" +
    "\216\043\035\044\040\045\046\046\055\047\053\050\041" +
    "\051\060\052\061\053\043\054\036\060\231\061\232\062" +
    "\210\063\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\240\001\001\000\002\001\001" +
    "\000\006\025\242\026\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\032\247\033\131\034\135\035\126\036\133\041\136\001" +
    "\001\000\002\001\001\000\004\026\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\032\254\033\131\034" +
    "\135\035\126\036\133\041\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\265\014\266\017\023\020\013\021" +
    "\025\022\022\023\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\032\270\033\131\034\135\035\126\036" +
    "\133\041\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\301\020\013\021\025\022\022\023\021\001" +
    "\001\000\002\001\001\000\006\015\275\016\274\001\001" +
    "\000\002\001\001\000\016\032\277\033\131\034\135\035" +
    "\126\036\133\041\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\256\021\025\022\257\023\021\001" +
    "\001\000\002\001\001\000\004\024\304\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PascalSyn$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PascalSyn$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PascalSyn$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }
        
        public void report_error(String message, Object info) {
        }
        
        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PascalSyn$actions {
  private final PascalSyn parser;

  /** Constructor */
  CUP$PascalSyn$actions(PascalSyn parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PascalSyn$do_action(
    int                        CUP$PascalSyn$act_num,
    java_cup.runtime.lr_parser CUP$PascalSyn$parser,
    java.util.Stack            CUP$PascalSyn$stack,
    int                        CUP$PascalSyn$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PascalSyn$result;

      /* select the action based on the action number */
      switch (CUP$PascalSyn$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // while_statement ::= WHILE value_expression DO 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("while_statement",49, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // no_if_statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("no_if_statement",48, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // no_if_statement ::= value_expression ASSIGN value_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("no_if_statement",48, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // no_if_statement ::= value_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("no_if_statement",48, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // matched_if_statement ::= IF value_expression THEN matched_if_statement ELSE matched_if_statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("matched_if_statement",47, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // matched_if_statement ::= no_if_statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("matched_if_statement",47, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // unmatched_if_statement ::= IF value_expression THEN matched_if_statement ELSE unmatched_if_statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("unmatched_if_statement",46, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // unmatched_if_statement ::= IF value_expression THEN statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("unmatched_if_statement",46, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // statement ::= unmatched_if_statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",45, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // statement ::= matched_if_statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement",45, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // statement_list ::= statement_list SEMIC statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement_list",44, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // statement_list ::= statement 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement_list",44, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // statement_block ::= BEGIN statement_list END 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement_block",43, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // statement_block ::= BEGIN END 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("statement_block",43, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // const_values ::= NIL 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_values",33, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // const_values ::= INT_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_values",33, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // const_values ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_values",33, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // const_values ::= BOOL_CONST 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_values",33, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // values ::= LBRACKET type_description RBRACKET 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("values",42, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // values ::= IDENTIFIER input_parameters 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("values",42, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // values ::= values DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("values",42, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // values ::= values LBRACKET value_expression RBRACKET 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("values",42, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // values ::= LPARENTHESIS value_expression RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("values",42, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // values ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("values",42, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // values ::= const_values 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("values",42, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // unary_prefix_expression ::= PTR values 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("unary_prefix_expression",40, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unary_prefix_expression ::= ADD values 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("unary_prefix_expression",40, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // unary_prefix_expression ::= SUB values 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("unary_prefix_expression",40, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unary_prefix_expression ::= values 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("unary_prefix_expression",40, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unary_postfix_expression ::= unary_prefix_expression PTR 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("unary_postfix_expression",41, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unary_postfix_expression ::= unary_prefix_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("unary_postfix_expression",41, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // not_expression ::= NOT unary_postfix_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("not_expression",39, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // not_expression ::= unary_postfix_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("not_expression",39, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // mul_div_expression ::= mul_div_expression DIV not_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("mul_div_expression",38, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // mul_div_expression ::= mul_div_expression MUL not_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("mul_div_expression",38, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // mul_div_expression ::= not_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("mul_div_expression",38, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // add_sub_expression ::= add_sub_expression SUB mul_div_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("add_sub_expression",37, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // add_sub_expression ::= add_sub_expression ADD mul_div_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("add_sub_expression",37, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // add_sub_expression ::= mul_div_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("add_sub_expression",37, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // relation_expression ::= relation_expression GEQ add_sub_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("relation_expression",36, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // relation_expression ::= relation_expression LEQ add_sub_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("relation_expression",36, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relation_expression ::= relation_expression LTH add_sub_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("relation_expression",36, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relation_expression ::= relation_expression GTH add_sub_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("relation_expression",36, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relation_expression ::= relation_expression NEQ add_sub_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("relation_expression",36, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relation_expression ::= relation_expression EQU add_sub_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("relation_expression",36, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relation_expression ::= add_sub_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("relation_expression",36, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // and_expression ::= and_expression AND relation_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("and_expression",35, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // and_expression ::= relation_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("and_expression",35, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // or_expression ::= or_expression OR and_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("or_expression",34, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // or_expression ::= and_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("or_expression",34, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // value_expression ::= or_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("value_expression",32, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type_pointer ::= PTR type_description 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_pointer",31, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // single_record_component ::= IDENTIFIER COLON type_description 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("single_record_component",30, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // record_components ::= record_components SEMIC single_record_component 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("record_components",29, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // record_components ::= single_record_component 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("record_components",29, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type_record ::= RECORD record_components END 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_record",28, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type_array ::= ARRAY LBRACKET value_expression DOTS value_expression RBRACKET OF type_description 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_array",27, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-7)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // reference_type ::= type_pointer 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("reference_type",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // reference_type ::= type_record 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("reference_type",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // reference_type ::= type_array 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("reference_type",26, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // primitive_type ::= INT 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("primitive_type",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // primitive_type ::= BOOL 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("primitive_type",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // primitive_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("primitive_type",25, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type_description ::= LPARENTHESIS type_description RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_description",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type_description ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_description",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type_description ::= reference_type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_description",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type_description ::= primitive_type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_description",24, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // single_parameter ::= value_expression 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("single_parameter",23, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameter_list ::= parameter_list COMMA single_parameter 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter_list",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameter_list ::= single_parameter 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter_list",22, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // input_parameters ::= LPARENTHESIS parameter_list RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("input_parameters",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // input_parameters ::= LPARENTHESIS RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("input_parameters",21, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // single_parameter_discription ::= IDENTIFIER COLON type_description 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("single_parameter_discription",20, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parameter_discription_list ::= parameter_discription_list SEMIC single_parameter_discription 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter_discription_list",19, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parameter_discription_list ::= single_parameter_discription 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter_discription_list",19, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameter_declaration ::= LPARENTHESIS parameter_discription_list RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter_declaration",18, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter_declaration ::= LPARENTHESIS RPARENTHESIS 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("parameter_declaration",18, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function_name ::= FUNCTION IDENTIFIER parameter_declaration COLON type_description SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("function_name",17, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-5)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // subrutine_function ::= function_name source_body SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subrutine_function",16, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // procedure_name ::= PROCEDURE IDENTIFIER parameter_declaration SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("procedure_name",15, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // subrutine_procedure ::= procedure_name source_body SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("subrutine_procedure",14, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declarations_subrutine ::= declarations_subrutine subrutine_function 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_subrutine",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declarations_subrutine ::= declarations_subrutine subrutine_procedure 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_subrutine",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarations_subrutine ::= subrutine_function 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_subrutine",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declarations_subrutine ::= subrutine_procedure 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_subrutine",13, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // single_var ::= IDENTIFIER COLON type_description SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("single_var",12, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // var_list ::= single_var var_list 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_list",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // var_list ::= single_var 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("var_list",11, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declarations_var ::= declarations_subrutine 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_var",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarations_var ::= VAR var_list declarations_subrutine 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_var",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarations_var ::= VAR var_list 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_var",10, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // single_type ::= IDENTIFIER EQU type_description SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("single_type",9, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_list ::= type_list single_type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_list",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_list ::= single_type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("type_list",8, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declarations_type ::= declarations_var 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_type",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarations_type ::= TYPE type_list declarations_var 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_type",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarations_type ::= TYPE type_list 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_type",7, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // single_const ::= IDENTIFIER EQU value_expression SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("single_const",6, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-3)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // const_list ::= const_list single_const 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_list",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // const_list ::= single_const 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("const_list",5, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declarations_const ::= declarations_type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_const",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarations_const ::= CONST const_list declarations_type 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_const",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarations_const ::= CONST const_list 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations_const",4, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= declarations_const 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // source_body ::= declarations statement_block 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("source_body",2, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // source_body ::= statement_block 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("source_body",2, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_name ::= PROGRAM IDENTIFIER SEMIC 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("program_name",1, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // source ::= program_name source_body DOT 
            {
              Object RESULT =null;

              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("source",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-2)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          return CUP$PascalSyn$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= source EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)).value;
		RESULT = start_val;
              CUP$PascalSyn$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.elementAt(CUP$PascalSyn$top-1)), ((java_cup.runtime.Symbol)CUP$PascalSyn$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PascalSyn$parser.done_parsing();
          return CUP$PascalSyn$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

